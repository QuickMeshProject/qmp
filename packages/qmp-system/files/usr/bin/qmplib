#!/usr/bin/lua

local qmp_network = require("qmp_network")
local qmp_system = require("qmp_system")
local qmp_uci = require("qmp_uci")
local qmp_wireless = require("qmp_wireless")

function print_help()
        print("qmplib is a handy script library that provides information about this qMp device\
  and the mesh status. It is mostly thought for development.")
        print("")
        print("Usage: qmplib <command> [options]")
        print("")
        print("Available commands:")
        print(" get_network_device_mac <device>                   : get a network device's MAC address")
        print(" get_system_community_id                           : get the device's community id")
        print(" get_system_node_id                                : get the device's node id")
        print(" get_system_primary_device                         : get the device's configured primary device")
        print(" get_uci_namesec <file> <type> <op>                : get an option in a named section of a file")
        print(" get_uci_nonamesec <file> <type> <index> <op>      : get an option in an indexed unnamed section of a file")
        print(" is_network_ethernet_devices <device>              : check if a device (e.g. eth0) is an Ethernet network device")
        print(" is_network_valid_mac <mac>                        : check if a MAC address (e.g. \"02:CA:FF:EE:BA:BE\") is valid")
        print(" list_network_all_devices                          : print the list of all network devices")
        print(" list_network_ethernet_devices                     : print the list of Ethernet network devices")
        print(" list_network_ethernet_switch_devices              : print the list of Ethernet network devices with a switch")
        print(" list_network_switch_devices                       : print the list of Ethernet network devices")
        print(" list_network_vlan_devices                         : print the list of VLAN network devices")
        print(" list_wireless_physical_devices                    : print the list of wireless physical devices")
        print(" list_wireless_radio_devices                       : print the list of wireless radio devices")
        print(" set_system_hostname <hostname>                    : set the system hostname specified by hostname")
        print(" set_uci_nonamesec <file> <type> <index> <op> <val>: set an option in an indexed unnamed section of a file")
        print(" table_network_etherswitch_devices                 : print the table of Ethernet network devices with a switch")
        print(" table_network_etherswitch_swconfig_devices        : print the table of Ethernet network devices with a switch as returned by swconfig")
        print(" table_network_vlan_ethernet_devices               : print the table of the VLAN network devices and their lower Ethernet device")
        print("")
end


function check_is_network_ethernet_devices()
  if #arg == 2 then
    print (tostring(qmp_network.is_ethernet_device(arg[2])))
  else
    print_help()
    os.exit(1)
  end
end


function check_is_network_valid_mac()
  if #arg == 2 then
    print (tostring(qmp_network.is_valid_mac(arg[2])))
  else
    print_help()
    os.exit(1)
  end
end


function get_network_device_mac()
  if #arg == 2 then
    print ((qmp_network.get_device_mac(arg[2])))
  else
    print_help()
    os.exit(1)
  end
end


function get_system_community_id()
  print (qmp_system.get_community_id())
end


function get_system_node_id()
  print (qmp_system.get_node_id())
end


function get_system_primary_device()
  print (qmp_system.get_primary_device())
end


function get_uci_namesec()
  if #arg == 4 then
    print (qmp_uci.get_option_namesec(arg[2], arg[3], arg[4]))
  else
    print_help()
    os.exit(1)
  end
end


function get_uci_nonamesec()
  if #arg == 5 then
    print (qmp_uci.get_option_nonamesec(arg[2], arg[3], arg[4], arg[5]))
  else
    print_help()
    os.exit(1)
  end
end


function print_list_network_all_devices()
  for k, v in pairs(qmp_network.get_all_devices()) do
    print (v)
  end
end


function print_list_network_ethernet_devices()
  for k, v in pairs(qmp_network.get_ethernet_devices()) do
    print (v)
  end
end


function print_list_network_ethernet_switch_devices()
  for k, v in pairs(qmp_network.get_ethernet_switch_devices()) do
    print (v)
  end
end


function print_list_network_switch_devices()
  for k, v in pairs(qmp_network.get_switch_devices()) do
    print (v)
  end
end


function print_list_network_vlan_devices()
  for k, v in pairs(qmp_network.get_vlan_devices()) do
    print (v)
  end
end


function print_list_wireless_physical_devices()
  for k, v in pairs(qmp_wireless.get_wireless_phy_devices()) do
    print (v)
  end
end


function print_list_wireless_radio_devices()
  for k, v in pairs(qmp_wireless.get_wireless_radio_devices()) do
    print (v)
  end
end


function print_table_network_etherswitch_devices()
  for k, v in pairs(qmp_network.get_etherswitch_devices()) do
    for l, w in pairs(v) do
      print (k .. ": " .. l .. ": " .. w)
    end
  end
end


function print_table_network_etherswitch_swconfig_devices()
  for k, v in pairs(qmp_network.get_etherswitch_swconfig_devices()) do
    for l, w in pairs(v) do
      print (k .. ": " .. l .. ": " .. w)
    end
  end
end


function print_table_network_vlan_ethernet_devices()
  for k, v in pairs(qmp_network.get_vlan_ethernet_devices()) do
    for l, w in pairs(v) do
      print (k .. ": " .. l .. ": " .. w)
    end
  end
end


function set_system_hostname()
  if #arg == 2 then
    qmp_system.set_hostname(arg[2])
  else
    print_help()
    os.exit(1)
  end
end


function set_uci_nonamesec()
  if #arg == 6 then
    qmp_uci.set_option_nonamesec(arg[2], arg[3], arg[4], arg[5], arg[6])
  else
    print_help()
    os.exit(1)
  end
end



if #arg < 1 then
        print_help()
        os.exit(1)
end

local command = arg[1]

if command == "get_network_device_mac" then
  get_network_device_mac()
elseif command == "get_system_community_id" then
  get_system_community_id()
elseif command == "get_system_node_id" then
  get_system_node_id()
elseif command == "get_system_primary_device" then
  get_system_primary_device()
elseif command == "get_uci_namesec" then
  get_uci_namesec()
elseif command == "get_uci_nonamesec" then
  get_uci_nonamesec()
elseif command == "is_network_ethernet_devices" then
  check_is_network_ethernet_devices()
elseif command == "is_network_valid_mac" then
  check_is_network_valid_mac()
elseif command == "list_network_all_devices" then
  print_list_network_all_devices()
elseif command == "list_network_ethernet_devices" then
  print_list_network_ethernet_devices()
elseif command == "list_network_ethernet_switch_devices" then
  print_list_network_ethernet_switch_devices()
elseif command == "list_network_switch_devices" then
  print_list_network_switch_devices()
elseif command == "list_network_vlan_devices" then
  print_list_network_vlan_devices()
elseif command == "list_wireless_physical_devices" then
  print_list_wireless_physical_devices()
elseif command == "list_wireless_radio_devices" then
  print_list_wireless_radio_devices()
elseif command == "set_system_hostname" then
  set_system_hostname()
elseif command == "set_uci_nonamesec" then
  set_uci_nonamesec()
elseif command == "table_network_etherswitch_devices" then
  print_table_network_etherswitch_devices()
elseif command == "table_network_etherswitch_swconfig_devices" then
  print_table_network_etherswitch_swconfig_devices()
elseif command == "table_network_vlan_ethernet_devices" then
  print_table_network_vlan_ethernet_devices()
end

